diff --git a/config/template.go b/config/template.go
index 727f6d82..f95da943 100644
--- a/config/template.go
+++ b/config/template.go
@@ -108,6 +108,8 @@ type TemplateConfig struct {
 	// and causes an error if a relative path tries to traverse outside that
 	// prefix.
 	SandboxPath *string `mapstructure:"sandbox_path"`
+
+	SetAsEnv *bool `mapstructure:"set_as_env"`
 }
 
 // DefaultTemplateConfig returns a configuration that is populated with the
@@ -168,6 +170,8 @@ func (c *TemplateConfig) Copy() *TemplateConfig {
 
 	o.SandboxPath = c.SandboxPath
 
+	o.SetAsEnv = c.SetAsEnv
+
 	return &o
 }
 
diff --git a/manager/runner.go b/manager/runner.go
index c3f40ce4..8f9ae481 100644
--- a/manager/runner.go
+++ b/manager/runner.go
@@ -804,6 +804,7 @@ func (r *Runner) runTemplate(tmpl *template.Template, runCtx *templateRunCtx) (*
 			Perms:          config.FileModeVal(templateConfig.Perms),
 			Uid:            templateConfig.Uid,
 			Gid:            templateConfig.Gid,
+			SetEnvVar:      config.BoolVal(templateConfig.SetAsEnv),
 		})
 		if err != nil {
 			if tmpl.ErrFatal() {
@@ -1054,7 +1055,7 @@ func (r *Runner) allTemplatesRendered() bool {
 // childEnv creates a map of environment variables for child processes to have
 // access to configurations in Consul Template's configuration.
 func (r *Runner) childEnv() []string {
-	var m = make(map[string]string)
+	m := make(map[string]string)
 
 	if config.StringPresent(r.config.Consul.Address) {
 		m["CONSUL_HTTP_ADDR"] = config.StringVal(r.config.Consul.Address)
@@ -1124,7 +1125,7 @@ func (r *Runner) storePid() error {
 
 	log.Printf("[INFO] creating pid file at %q", path)
 
-	f, err := os.OpenFile(path, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0666)
+	f, err := os.OpenFile(path, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0o666)
 	if err != nil {
 		return fmt.Errorf("runner: could not open pid file: %s", err)
 	}
diff --git a/renderer/renderer.go b/renderer/renderer.go
index 6190381a..a35a6b8f 100644
--- a/renderer/renderer.go
+++ b/renderer/renderer.go
@@ -15,7 +15,7 @@ import (
 const (
 	// DefaultFilePerms are the default file permissions for files rendered onto
 	// disk when a specific file permission has not already been specified.
-	DefaultFilePerms = 0644
+	DefaultFilePerms = 0o644
 )
 
 var (
@@ -37,6 +37,9 @@ type RenderInput struct {
 	Path           string
 	Perms          os.FileMode
 	Uid, Gid       *int
+
+	// If SetEnvVar is true, set an environment variable, named in Path
+	SetEnvVar bool
 }
 
 // RenderResult is returned and stored. It contains the status of the render
@@ -60,6 +63,15 @@ type RenderResult struct {
 // Render atomically renders a file contents to disk, returning a result of
 // whether it would have rendered and actually did render.
 func Render(i *RenderInput) (*RenderResult, error) {
+	if i.SetEnvVar {
+		os.Setenv(i.Path, string(i.Contents))
+		return &RenderResult{
+			DidRender:   true,
+			WouldRender: true,
+			Contents:    i.Contents,
+		}, nil
+	}
+
 	existing, err := ioutil.ReadFile(i.Path)
 	fileExists := !os.IsNotExist(err)
 	if err != nil && fileExists {
@@ -126,7 +138,7 @@ func AtomicWrite(path string, createDestDirs bool, contents []byte, perms os.Fil
 	parent := filepath.Dir(path)
 	if _, err := os.Stat(parent); os.IsNotExist(err) {
 		if createDestDirs {
-			if err := os.MkdirAll(parent, 0755); err != nil {
+			if err := os.MkdirAll(parent, 0o755); err != nil {
 				return err
 			}
 		} else {
