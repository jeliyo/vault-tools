diff --git a/examples/injector/dynamic-secrets/patch-annotations.yaml b/examples/injector/dynamic-secrets/patch-annotations.yaml
index aa369ea..3bd8402 100644
--- a/examples/injector/dynamic-secrets/patch-annotations.yaml
+++ b/examples/injector/dynamic-secrets/patch-annotations.yaml
@@ -6,13 +6,16 @@ spec:
         vault.hashicorp.com/agent-inject: "true"
         vault.hashicorp.com/agent-inject-status: "update"
         vault.hashicorp.com/agent-run-as-same-user: "true"
+        ## inject directly into the app container
+        vault.hashicorp.com/agent-inject-direct: "true"
         # DATABASE SECRET
         vault.hashicorp.com/agent-inject-secret-db-creds: "database/creds/db-app"
         vault.hashicorp.com/agent-inject-template-db-creds: |
           {{- with secret "database/creds/db-app" -}}
           postgres://{{ .Data.username }}:{{ .Data.password }}@postgres.postgres.svc:5432/wizard?sslmode=disable
           {{- end }}
-        vault.hashicorp.com/agent-inject-command-db-creds: "sh -c 'kill -HUP $(pidof app)'"
+        ## Specify the environment variable name
+        vault.hashicorp.com/agent-inject-as-env-db-creds: DB_URL
         # VAULT SETTINGS
         vault.hashicorp.com/role: "app"
         vault.hashicorp.com/tls-secret: "tls-test-client"
diff --git a/examples/injector/dynamic-secrets/run.sh b/examples/injector/dynamic-secrets/run.sh
index 155be51..e832af5 100755
--- a/examples/injector/dynamic-secrets/run.sh
+++ b/examples/injector/dynamic-secrets/run.sh
@@ -26,7 +26,8 @@ spec:
       serviceAccountName: app
       containers:
       - name: app
-        image: jodonnellhashi/dynamic-secrets-app:1.0.0
+        command: ["/app"]
+        image: tvoranhc/dynamic-secrets-app:1.0.0-env
         imagePullPolicy: Always
         securityContext:
           runAsUser: 100
diff --git a/src/dynamic-secrets/Makefile b/src/dynamic-secrets/Makefile
index 0398b20..829f680 100644
--- a/src/dynamic-secrets/Makefile
+++ b/src/dynamic-secrets/Makefile
@@ -16,7 +16,7 @@ build:
 
 image: build
 	docker build --no-cache -t app -f ./build/Dockerfile .
-	docker tag app hashicorp/dynamic-secrets-app:$(VERSION)
+	docker tag app $(IMAGE_TAG)
 
 clean:
 	-rm -rf $(BUILD_DIR)
diff --git a/src/dynamic-secrets/build/Dockerfile b/src/dynamic-secrets/build/Dockerfile
index f94b4c3..7336d74 100644
--- a/src/dynamic-secrets/build/Dockerfile
+++ b/src/dynamic-secrets/build/Dockerfile
@@ -2,6 +2,8 @@ FROM alpine:latest
 
 ARG VERSION=1.0.0
 
+RUN apk add jq
+
 RUN addgroup app && \
     adduser -S -G app app
 
diff --git a/src/dynamic-secrets/envs.go b/src/dynamic-secrets/envs.go
index 0bbdf99..afc0f00 100644
--- a/src/dynamic-secrets/envs.go
+++ b/src/dynamic-secrets/envs.go
@@ -9,7 +9,7 @@ import (
 
 type Specification struct {
 	Listen          string
-	DatabasePath    string `envconfig:"db_path"`
+	DatabaseURL     string `envconfig:"db_url"`
 	TLSPath         string `envconfig:"tls_path"`
 	CSI             string
 	CSIUsernamePath string `envconfig:"csi_username_path"`
@@ -44,8 +44,8 @@ func (a *App) parseEnvs() error {
 			return fmt.Errorf("CIS enabled but missing APP_CSI_USERNAME_PATH, APP_CSI_PASSWORD_PATH, or APP_CSI_PG_SERVICE")
 		}
 	} else {
-		if envs.DatabasePath != "" {
-			a.DatabasePath = envs.DatabasePath
+		if envs.DatabaseURL != "" {
+			a.DatabasePath = envs.DatabaseURL
 		}
 
 		if a.DatabasePath == "" {
diff --git a/src/dynamic-secrets/main.go b/src/dynamic-secrets/main.go
index acc435c..854b1f7 100644
--- a/src/dynamic-secrets/main.go
+++ b/src/dynamic-secrets/main.go
@@ -1,6 +1,7 @@
 package main
 
 import (
+	"fmt"
 	"io/ioutil"
 	"net/http"
 	"os"
@@ -156,16 +157,21 @@ func (a *App) newDBConnection() (*pg.DB, error) {
 		service = strings.Replace(service, "PASSWORD", string(dbPassword), -1)
 		a.DatabaseSecret = strings.Replace(strings.TrimSpace(string(service)), "\n", "", -1)
 	} else {
-		for !fileExists(a.DatabasePath) {
-			a.Logger.Error("error reading database secret: file does not exist", "file", a.DatabasePath)
-			time.Sleep(1 * time.Second)
-		}
-
-		dbSecret, err := ioutil.ReadFile(a.DatabasePath)
-		if err != nil {
-			a.Logger.Error("error reading database secret", "error", err)
-			return nil, err
+		dbSecret := os.Getenv("DB_URL")
+		if dbSecret == "" {
+			a.Logger.Error("DB_URL is empty :(")
+			return nil, fmt.Errorf("DB_URL is empty")
 		}
+		// for !fileExists(a.DatabasePath) {
+		// 	a.Logger.Error("error reading database secret: file does not exist", "file", a.DatabasePath)
+		// 	time.Sleep(1 * time.Second)
+		// }
+
+		// dbSecret, err := ioutil.ReadFile(a.DatabasePath)
+		// if err != nil {
+		// 	a.Logger.Error("error reading database secret", "error", err)
+		// 	return nil, err
+		// }
 
 		a.DatabaseSecret = strings.Replace(strings.TrimSpace(string(dbSecret)), "\n", "", -1)
 	}
diff --git a/values.yaml b/values.yaml
index f83da87..45c2b9f 100644
--- a/values.yaml
+++ b/values.yaml
@@ -1,6 +1,13 @@
 global:
   tlsDisable: false
 
+injector:
+  image:
+    tag: dev
+  agentImage:
+    repository: vault
+    tag: dev
+
 server:
   extraVolumes:
   - type: secret
@@ -11,11 +18,11 @@ server:
     name: tls-test-client
 
   extraEnvironmentVar:
-    VAULT_CACERT=/vault/userconfig/tls-test-server/ca.crt
+    VAULT_CACERT: /vault/userconfig/tls-test-server/ca.crt
 
   image:
-    repository: hashicorp/vault-enterprise
-    tag: 1.7.0_ent
+    repository: vault
+    tag: dev
 
   standalone:
     enabled: true
@@ -40,7 +47,7 @@ server:
   - "sleep 5 && cp /vault/userconfig/demo-vault/bootstrap.sh /tmp/bootstrap.sh && chmod +x /tmp/bootstrap.sh && /tmp/bootstrap.sh"
 
 csi:
-  enabled: true
+  enabled: false
 
   volumes:
   - name: tls
